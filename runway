#!/usr/bin/env shelduck_run

main() {
	set -eu
	runway_load_config
	runway_watch
}

runway_load_config() {
	RUNWAY_DEFAULT_INSTALL_NAME=runway
	RUNWAY_DEFAULT_INSTALL_ROOT=

	: "${RUNWAY_INSTALL_NAME:=$RUNWAY_DEFAULT_INSTALL_NAME}"
	: "${RUNWAY_INSTALL_ROOT:=$RUNWAY_DEFAULT_INSTALL_ROOT}"

	bobshell_scope_mirror RUNWAY_INSTALL_ BOBSHELL_INSTALL_
	bobshell_install_init
	bobshell_scope_mirror BOBSHELL_INSTALL_ RUNWAY_INSTALL_

	bobshell_install_get_config env.sh var:runway_load_config
	bobshell_preserve_env bobshell_eval var:runway_load_config

	bobshell_scope_mirror RUNWAY_SSH_ BOBSHELL_SSH_
	: "${RUNWAY_REPO_PATH:=$RUNWAY_INSTALL_DATADIR/$RUNWAY_INSTALL_NAME/checkout}"	
	: "${RUNWAY_RUN_INSTALL:=${RUNWAY_RUN_COMMAND:-./run install}}"
	: "${RUNWAY_RUN_TIMER:=${RUNWAY_RUN_COMMAND:-./run timer}}"
	: "${RUNWAY_RUN_ENV:=}"
	: "${RUNWAY_DELAY:=60}"
}

runway_watch() {
	while true; do
		runway_check
		sleep "$RUNWAY_DELAY"
	done
}

runway_check() {
	: "${runway_check_old_hash:=}"
	runway_git_refresh
	runway_check_new_hash=$(runway_git_hash)
	if [ -n "$runway_check_old_hash" ] && [ "$runway_check_old_hash" = "$runway_check_new_hash" ]; then
		runway_run_command "$RUNWAY_RUN_TIMER"
	else
		runway_run_command "$RUNWAY_RUN_INSTALL"
		runway_check_old_hash="$runway_check_new_hash" 
	fi
	unset runway_check_new_hash
}

runway_run_command() (
	cd "$RUNWAY_REPO_PATH"
	set -o allexport
	bobshell_eval var:RUNWAY_RUN_ENV
	bobshell_eval "$1"
)

runway_git_hash() {
	if [ ! -d "$RUNWAY_REPO_PATH" ]; then
		return
	fi
	( cd "$RUNWAY_REPO_PATH" && git rev-parse HEAD )
}


runway_git() {
	git --git-dir "$RUNWAY_REPO_PATH/.git" --work-tree="$RUNWAY_REPO_PATH" "$@"
}

runway_auth_git() {
	bobshell_git_ssh_auth runway_git "$@"
}



runway_git_refresh() {
	if [ -e "$RUNWAY_REPO_PATH" ]; then
		if [ ! -d "$RUNWAY_REPO_PATH" ]; then
			bobshell_die "$RUNWAY_REPO_PATH, when exists, expected to be directory" 
		fi
		if [ -z "$(ls -A "$RUNWAY_REPO_PATH")" ]; then
			rmdir "$RUNWAY_REPO_PATH"
		fi
	fi

	if [ ! -e "$RUNWAY_REPO_PATH" ]; then 
		bobshell_git_ssh_auth git clone \
				${RUNWAY_REPO_BRANCH:+ --branch "$RUNWAY_REPO_BRANCH"} --single-branch --recurse-submodules \
				"$RUNWAY_REPO_URL" "$RUNWAY_REPO_PATH"
	fi

	runway_git reset --hard HEAD
	if [ -z "${RUNWAY_REPO_BRANCH:-}" ]; then
		RUNWAY_REPO_BRANCH="$(runway_git rev-parse --abbrev-ref HEAD)"
	else
		runway_git checkout "$RUNWAY_REPO_BRANCH"
	fi
	runway_auth_git fetch origin "$RUNWAY_REPO_BRANCH"
	runway_git reset --hard "origin/$RUNWAY_REPO_BRANCH"
}


shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/install.sh
shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/scope.sh
shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/util.sh
shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/git.sh
shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/entry_point.sh